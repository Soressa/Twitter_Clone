

from django.contrib import admin

# Register your models here

from .models import Tweets

admin.site.register(Tweets)

from django.apps import AppConfig


class TweetsConfig(AppConfig):
    default_auto_field = 'django.db.models.BigAutoField'
    name = 'tweets'

from django import forms
from .models import Tweets

class TweetForm(forms.ModelForm):
    class Meta:
        model = Tweets
        fields = '__all__'

from django.db import models
from cloudinary.models import CloudinaryField


# Create your models here

class Tweets(models.Model):
    class Meta(object):
        db_table = 'tweets'
    name = models.CharField(
        'Name', blank=False, null=False, max_length=14, db_index=True, default='Anonymous'
    )    
    body = models.CharField (
        'Body', blank=True, null=True, max_length=140, db_index=True
    )
    created_at = models.DateField('Created DateTime', blank=True, auto_now_add=True
    ) 
    image = CloudinaryField('image', blank=True, null=True
    )
    update_at = models.DateField(
        'Updated DateTime', blank=True, auto_now_add=True
    )
from django.test import TestCase

# Create your tests here.

from django.urls import path
from . import views

urlpatterns = [
    path('',views.index, name='index'),
    path('delete/<int:tweets_id>/', views.delete, name='delete'),
    path('update/<int:tweets_id>/', views.update, name='update'),
]
from django.shortcuts import render, redirect
from django.http import HttpResponse, HttpResponseRedirect
from .models import Tweets
from .forms import TweetForm
from datetime import datetime


# Create your views here


def index(request):
    # If the method is POST 
    if request.method == 'POST':
        form = TweetForm(request.POST, request.FILES)
        # If the form is valid
        if form.is_valid():
            # Yes, Save
            form.save()

            # Redirect to Home
            return HttpResponseRedirect('/')

        else:
            # No, Show Error
            return HttpResponseRedirect(form.errors.as_json())

    # Get all the tweets
    tweets = Tweets.objects.all()

    # Show
    return render(request, 'tweets.html', {'tweets': tweets})

# /// DELETE

def delete(request, tweets_id):
    # find post
    tweets = Tweets.objects.get(id=tweets_id)
    tweets.delete()
    return HttpResponse('/')

# /// UPDATE

def update(request, tweets_id):
    tweets = Tweets.objects.get(id=tweets_id)
    form = TweetForm(instance=tweets)
    if request.method == 'POST':
        form = TweetForm(request.POST, request.FILES, instance = tweets)
        if form.is_valid():
            form.save()
            # Redirect to home
            return HttpResponseRedirect('/')
            # Show 
    return render(request, 'update.html',{'form':form})
    
